[{"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/index.js":"1","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/App.js":"2","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/reportWebVitals.js":"3","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/redux/index.js":"4","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/utils/SocketContext.js":"5","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/redux/NicknameReducer.js":"6","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/index.js":"7","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/AppHead.js":"8","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/PreGame.js":"9","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/Card.js":"10","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/Game.js":"11","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/Lobby.js":"12"},{"size":1122,"mtime":1640308129891,"results":"13","hashOfConfig":"14"},{"size":1016,"mtime":1640388757602,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1640308129893,"results":"16","hashOfConfig":"14"},{"size":361,"mtime":1640308129892,"results":"17","hashOfConfig":"14"},{"size":92,"mtime":1640308129893,"results":"18","hashOfConfig":"14"},{"size":438,"mtime":1640308129892,"results":"19","hashOfConfig":"14"},{"size":121,"mtime":1640308129891,"results":"20","hashOfConfig":"14"},{"size":720,"mtime":1640397961938,"results":"21","hashOfConfig":"14"},{"size":3036,"mtime":1640400550545,"results":"22","hashOfConfig":"14"},{"size":951,"mtime":1640308129890,"results":"23","hashOfConfig":"14"},{"size":39027,"mtime":1640308171097,"results":"24","hashOfConfig":"14"},{"size":5720,"mtime":1640404966403,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"j82sim",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/index.js",[],["53","54"],"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/App.js",[],"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/reportWebVitals.js",[],"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/redux/index.js",[],"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/utils/SocketContext.js",["55"],"import React, { createContext } from 'react';\n\nexport const SocketContext = createContext();","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/redux/NicknameReducer.js",[],"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/index.js",[],"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/AppHead.js",[],"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/PreGame.js",["56"],"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/Card.js",[],"/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/Game.js",["57","58","59"],"import React, { useEffect, useState } from 'react';\nimport { useSelector } from \"react-redux\";\nimport { useParams } from 'react-router';\nimport { PlayingCard } from \"./Card\";\n\nimport { Paper, Grid, Typography, Modal, Box, Button, MenuItem, Select, InputLabel } from '@mui/material';\nimport { SocketContext } from '../utils/SocketContext';\n\nconst Game = ({ socket }) => {\n    const nickname = useSelector(state => state.nickname.nickname);\n    const { gameId } = useParams();\n\n    const [turnOption, setTurnOption] = useState('');\n    const [turnId, setTurnId] = useState('');\n    const [players, setPlayers] = useState([]);\n    const [nextCard, setNextCard] = useState({});\n    const [discard, setDiscard] = useState([]);\n    const [id, setId] = useState('');\n\n    const [playerSelect, setPlayerSelect] = useState({})\n    const [canLook, setCanLook] = useState(false)\n    const [desiredCard, setDesiredCard] = useState(null)\n    const [ditchedCard, setDitchedCard] = useState(null)\n    const [canConfirm, setCanConfirm] = useState(false)\n\n    const [redCalled, setRedCalled] = useState(false);\n    const [scoreboard, setScoreboard] = useState({});\n    const [endGame, setEndGame] = useState(false);\n\n    // Modal Stuff\n    const [open, setOpen] = useState(false);\n    const handleOpen = (selection) => {\n        // socket.to(gameId).emit('hello')\n        setTurnOption(selection);\n        setOpen(true);\n    };\n    const handleClose = (event) => {\n        setTurnOption('');\n        setOpen(false);\n    };\n\n    // Special Modal Stuff\n    const [specialOpen, setSpecialOpen] = useState(false);\n    // const handleSpecialOpen = () => {\n    //     setSpecialOpen(true);\n    // };\n    const handleSpecialClose = () => {\n        setSpecialOpen(false);\n    };\n\n    // Endgame Modal Stuff\n    const [endGameOpen, setEndGameOpen] = useState(false)\n    const handleEndGameClose = () => {\n        setEndGameOpen(false)\n    }\n\n    const handleCardSwap = (card, i, newCard) => {\n        console.log(`${card.visVal + card.suit}, ${i}, ${newCard.visVal + newCard.suit}`)\n        socket.emit('clientToServerTurnSwap', [card, i, newCard, gameId])\n        handleClose();\n    }\n\n    const handleRed = () => {\n        socket.emit('clientToServerRedCalled', [gameId])\n        console.log(id, 'called Red')\n    }\n\n    const handleCardSlap = (card, i) => {\n        // console.log(`card: ${JSON.stringify(card)}, i: ${i}, slappable: ${discard.length === 0 ? false : card.visVal === discard[discard.length - 1].visVal}`)\n        if (discard.length > 0) {\n            if (card.visVal === discard[discard.length - 1].visVal) {\n                console.log('slapping')\n                socket.emit('clientToServerCardSlapSuccess', [i, gameId])\n            } else {\n                console.log('slap fail')\n                // socket.emit('clientToServerCardSlapFailure')\n            }\n        } else {\n            console.log('cant slap yet')\n            // socket.emit('clientToServerCardSlapFailure')\n        }\n    }\n\n    const handleCardLook = (event, card) => {\n        console.log(event.target)\n        console.log(card)\n        setCanLook(false)\n        setInterval(() => {\n            event.target.src = `/cards/red_back.png`\n        }, 5000)\n\n        event.target.src = `/cards/${card.visVal}${card.suit}.png`\n    }\n\n    const handleSpecialPick = (event, card) => {\n        if (nextCard.intVal === 9) {\n            setDesiredCard(card)\n\n        } else if (nextCard.intVal === 10) {\n            setDesiredCard(card)\n            if (canLook) {\n                setCanLook(false)\n                setInterval(() => {\n                    event.target.src = `/cards/red_back.png`\n                }, 5000)\n\n                event.target.src = `/cards/${card.visVal}${card.suit}.png`\n            }\n\n        }\n    }\n\n    const handleConfirmSpecial = (event, card) => {\n\n\n        if (desiredCard !== null) {\n            setDitchedCard(card)\n            console.log('handleConfirmSpecial,', event, card, desiredCard)\n        }\n    }\n\n    const handleSpecialSwap = (event) => {\n        setSpecialOpen(false)\n        socket.emit('clientToServerSpecialSwap', [ditchedCard, desiredCard, gameId])\n    }\n\n    const handlePlayerSelect = (event) => {\n        console.log(event.target.value)\n        setDesiredCard(null)\n        setDitchedCard(null)\n        setPlayerSelect(event.target.value);\n    }\n\n    const specialBody = (\n        <React.Fragment>\n            <Modal\n                hideBackdrop\n                open={specialOpen}\n                onClose={handleSpecialClose}\n                aria-labelledby=\"child-modal-title\"\n                aria-describedby=\"child-modal-description\"\n            >\n\n                {/* Rule */}\n                {\n                    nextCard.intVal === 7 ? (\n                        // 7 rule\n                        <Box sx={{\n                            position: 'absolute',\n                            top: '50%',\n                            left: '50%',\n                            transform: 'translate(-50%, -50%)',\n                            width: 400,\n                            bgcolor: 'background.paper',\n                            border: '2px solid #000',\n                            boxShadow: 24,\n                            pt: 2,\n                            px: 4,\n                            pb: 3,\n                        }}>\n                            <h2 id=\"child-modal-title\">You pulled a {nextCard.visVal}</h2>\n                            <Box>\n                                {\n                                    players.map(player => (\n                                        player.s === id ?\n                                            <Paper elevation={0} sx={{ padding: 2, backgroundColor: '#28A5A5' }}>\n                                                <Typography variant='h4' sx={{ color: 'white' }}>{player.s === id ? player.n : null}</Typography>\n                                                <Grid container spacing={3} sx={{ width: '100%' }}>\n                                                    {/* Hand Map */}\n                                                    {\n                                                        player.s === id\n                                                            ? player.h.map((card, i) => (\n                                                                <Grid item xs={6} sm={6}>\n                                                                    {\n                                                                        card === 0\n                                                                            ? <PlayingCard />\n                                                                            // possible place to send feed info to server and then to other clients\n                                                                            : <PlayingCard onClick={canLook ? (event) => handleCardLook(event, card) : null} image={i > 1 ? `/cards/${card.visVal}${card.suit}.png` : `/cards/red_back.png`} />\n                                                                    }\n                                                                </Grid>\n                                                            ))\n                                                            : null\n                                                    }\n\n                                                </Grid>\n                                            </Paper>\n                                            : null\n                                    )\n                                    )\n                                }\n                            </Box>\n                            <Button onClick={handleSpecialClose}>Skip</Button>\n                        </Box>\n                    ) : nextCard.intVal === 8 ? (\n                        // 8 rule\n                        <Box sx={{\n                            position: 'absolute',\n                            top: '50%',\n                            left: '50%',\n                            transform: 'translate(-50%, -50%)',\n                            width: 400,\n                            bgcolor: 'background.paper',\n                            border: '2px solid #000',\n                            boxShadow: 24,\n                            pt: 2,\n                            px: 4,\n                            pb: 3,\n                        }}>\n                            <h2 id=\"child-modal-title\">You pulled an {nextCard.visVal}</h2>\n                            <InputLabel>Select a Player's Hand</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                value={playerSelect}\n                                label=\"Player\"\n                                onChange={handlePlayerSelect}\n                            >\n                                {players.filter(player => player.s !== id).map((player) => (\n                                    <MenuItem value={player.s}>{player.n}</MenuItem>\n                                ))}\n                            </Select>\n                            {\n                                playerSelect ? (\n                                    <Box>\n                                        {\n                                            players.map(player => (\n                                                player.s === playerSelect ?\n                                                    <Paper elevation={0} sx={{ padding: 2 }}>\n                                                        <h4>{player.s === id ? player.n : null}</h4>\n                                                        <Grid container spacing={3} sx={{ width: '100%' }}>\n                                                            {/* Hand Map */}\n                                                            {\n                                                                player.s === playerSelect\n                                                                    ? player.h.map((card, i) => (\n                                                                        <Grid item xs={6} sm={6}>\n                                                                            {\n                                                                                card === 0\n                                                                                    ? <PlayingCard />\n                                                                                    // possible place to send feed info to server and then to other clients\n                                                                                    : <PlayingCard onClick={canLook ? (event) => handleCardLook(event, card) : null} image={`/cards/red_back.png`} />\n                                                                            }\n                                                                        </Grid>\n                                                                    ))\n                                                                    : null\n                                                            }\n\n                                                        </Grid>\n                                                    </Paper>\n                                                    : null\n                                            )\n                                            )\n                                        }\n                                    </Box>\n                                ) : null\n                            }\n                            <Button onClick={handleSpecialClose}>Skip</Button>\n                        </Box>\n                    ) : nextCard.intVal === 9 ? (\n                        // 9 rule\n                        <Box sx={{\n                            position: 'absolute',\n                            top: '50%',\n                            left: '50%',\n                            transform: 'translate(-50%, -50%)',\n                            width: 400,\n                            bgcolor: 'background.paper',\n                            border: '2px solid #000',\n                            boxShadow: 24,\n                            pt: 2,\n                            px: 4,\n                            pb: 3,\n                        }}>\n                            <h2 id=\"child-modal-title\">You pulled a {nextCard.visVal}</h2>\n                            <p id=\"child-modal-description\">\n                                You can select a player to switch with:\n                            </p>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                value={playerSelect}\n                                label=\"Player\"\n                                onChange={handlePlayerSelect}\n                            >\n                                {players.filter(player => player.s !== id).map((player) => (\n                                    <MenuItem value={player.s}>{player.n}</MenuItem>\n                                ))}\n                            </Select>\n                            <Box>\n                                <Grid container>\n                                    <Grid item xs>\n                                        {\n                                            players.map(player => (\n                                                player.s === playerSelect ?\n                                                    <Paper elevation={0} sx={{ padding: 2 }}>\n                                                        <h4>{player.s === playerSelect ? player.n : null}</h4>\n                                                        <Grid container spacing={3} sx={{ width: '100%' }}>\n                                                            {/* Hand Map */}\n                                                            {\n                                                                player.s === playerSelect\n                                                                    ? player.h.map((card, i) => (\n                                                                        <Grid item xs={6} sm={6}>\n                                                                            {\n                                                                                card === 0\n                                                                                    ? <PlayingCard />\n                                                                                    // possible place to send feed info to server and then to other clients\n                                                                                    : card === desiredCard ? <PlayingCard selected onClick={(event) => handleSpecialPick(event, card)} image={`/cards/red_back.png`} /> : <PlayingCard onClick={(event) => handleSpecialPick(event, card)} image={`/cards/red_back.png`} />\n                                                                            }\n                                                                        </Grid>\n                                                                    ))\n                                                                    : null\n                                                            }\n\n                                                        </Grid>\n                                                    </Paper>\n                                                    : null\n                                            )\n                                            )\n                                        }\n                                    </Grid>\n                                    <Grid item xs>\n                                        {\n                                            desiredCard ? players.map(player => (\n                                                player.s === id ?\n                                                    <Paper elevation={0} sx={{ padding: 2, backgroundColor: '#28A5A5' }}>\n                                                        <h4>{player.s === id ? player.n : null}</h4>\n                                                        <Grid container spacing={3} sx={{ width: '100%' }}>\n                                                            {/* Hand Map */}\n                                                            {\n                                                                player.s === id\n                                                                    ? player.h.map((card, i) => (\n                                                                        <Grid item xs={6} sm={6}>\n                                                                            {\n                                                                                card === 0\n                                                                                    ? <PlayingCard />\n                                                                                    // possible place to send feed info to server and then to other clients\n                                                                                    : card === ditchedCard ? <PlayingCard selected onClick={(event) => handleConfirmSpecial(event, card)} image={`/cards/red_back.png`} /> : <PlayingCard onClick={(event) => handleConfirmSpecial(event, card)} image={`/cards/red_back.png`} />\n                                                                            }\n                                                                        </Grid>\n                                                                    ))\n                                                                    : null\n                                                            }\n\n                                                        </Grid>\n                                                    </Paper>\n                                                    : null\n                                            )\n                                            ) : null\n                                        }\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                            <Button onClick={handleSpecialClose}>Skip</Button>\n                            {\n                                canConfirm ? <Button onClick={() => handleSpecialSwap()}>Swap</Button> : <Button disabled>Swap</Button>\n                            }\n                        </Box>\n                    ) : nextCard.intVal === 10 ? (\n                        // 10 rule\n                        <Box sx={{\n                            position: 'absolute',\n                            top: '50%',\n                            left: '50%',\n                            transform: 'translate(-50%, -50%)',\n                            width: 400,\n                            bgcolor: 'background.paper',\n                            border: '2px solid #000',\n                            boxShadow: 24,\n                            pt: 2,\n                            px: 4,\n                            pb: 3,\n                        }}>\n                            <h2 id=\"child-modal-title\">You pulled a {nextCard.visVal}</h2>\n                            <p id=\"child-modal-description\">\n                                You can select a player to switch with:\n                            </p>\n                            <Select\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                value={playerSelect}\n                                label=\"Player\"\n                                onChange={handlePlayerSelect}\n                            >\n                                {players.filter(player => player.s !== id).map((player) => (\n                                    <MenuItem value={player.s}>{player.n}</MenuItem>\n                                ))}\n                            </Select>\n                            <Box>\n                                <Grid container>\n                                    <Grid item xs>\n                                        {\n                                            players.map(player => (\n                                                player.s === playerSelect ?\n                                                    <Paper elevation={0} sx={{ padding: 2 }}>\n                                                        <h4>{player.s === playerSelect ? player.n : null}</h4>\n                                                        <Grid container spacing={3} sx={{ width: '100%' }}>\n                                                            {/* Hand Map */}\n                                                            {\n                                                                player.s === playerSelect\n                                                                    ? player.h.map((card, i) => (\n                                                                        <Grid item xs={6} sm={6}>\n                                                                            {\n                                                                                card === 0\n                                                                                    ? <PlayingCard />\n                                                                                    // possible place to send feed info to server and then to other clients\n                                                                                    : card === desiredCard ? <PlayingCard selected onClick={(event) => handleSpecialPick(event, card)} image={`/cards/red_back.png`} /> : <PlayingCard onClick={(event) => handleSpecialPick(event, card)} image={`/cards/red_back.png`} />\n                                                                            }\n                                                                        </Grid>\n                                                                    ))\n                                                                    : null\n                                                            }\n\n                                                        </Grid>\n                                                    </Paper>\n                                                    : null\n                                            )\n                                            )\n                                        }\n                                    </Grid>\n                                    <Grid item xs>\n                                        {\n                                            desiredCard ? players.map(player => (\n                                                player.s === id ?\n                                                    <Paper elevation={0} sx={{ padding: 2, backgroundColor: '#28A5A5' }}>\n                                                        <h4>{player.s === id ? player.n : null}</h4>\n                                                        <Grid container spacing={3} sx={{ width: '100%' }}>\n                                                            {/* Hand Map */}\n                                                            {\n                                                                player.s === id\n                                                                    ? player.h.map((card, i) => (\n                                                                        <Grid item xs={6} sm={6}>\n                                                                            {\n                                                                                card === 0\n                                                                                    ? <PlayingCard />\n                                                                                    // possible place to send feed info to server and then to other clients\n                                                                                    : card === ditchedCard ? <PlayingCard selected onClick={(event) => handleConfirmSpecial(event, card)} image={`/cards/red_back.png`} /> : <PlayingCard onClick={(event) => handleConfirmSpecial(event, card)} image={`/cards/red_back.png`} />\n                                                                            }\n                                                                        </Grid>\n                                                                    ))\n                                                                    : null\n                                                            }\n\n                                                        </Grid>\n                                                    </Paper>\n                                                    : null\n                                            )\n                                            ) : null\n                                        }\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                            <Button onClick={handleSpecialClose}>Skip</Button>\n                            {\n                                canConfirm ? <Button onClick={() => handleSpecialSwap()}>Swap</Button> : <Button disabled>Swap</Button>\n                            }\n                        </Box>\n                    ) : null\n                }\n\n\n            </Modal>\n        </React.Fragment>\n    )\n\n    const body = (\n        <Box sx={{\n            maxWidth: '25vw',\n            backgroundColor: 'white',\n            position: 'absolute',\n            left: `${33}%`,\n            top: `${33}%`,\n            transform: `translate(-${33}%, -${33}%)`,\n        }}>\n            <Typography variant='h4' id=\"simple-modal-title\" sx={{ m: 2 }}>What card do you want to swap with?</Typography>\n            {\n                players.map(player => (\n                    player.s === id ?\n                        <Paper elevation={0} sx={{ padding: 2, backgroundColor: '#28A5A5' }}>\n                            <h4>{player.s === id ? player.n : null}</h4>\n                            <Grid container spacing={3} sx={{ width: '100%' }}>\n                                {/* Hand Map */}\n                                {\n                                    player.s === id\n                                        ? player.h.map((card, i) => (\n                                            <Grid item xs={6} sm={6}>\n                                                {\n                                                    card === 0\n                                                        ? <PlayingCard />\n                                                        // possible place to send feed info to server and then to other clients\n                                                        : <PlayingCard onClick={() => { turnOption === 'nextCard' ? handleCardSwap(card, i, nextCard) : handleCardSwap(card, i, discard[discard.length - 1]) }} image={`/cards/${card.visVal}${card.suit}.png`} />\n                                                }\n                                            </Grid>\n                                        ))\n                                        : null\n                                }\n\n                            </Grid>\n                        </Paper>\n                        : null\n                )\n                )\n            }\n            {specialBody}\n        </Box>\n    );\n\n    const endGameBody = (\n        <Box sx={{\n            maxWidth: '25vw',\n            backgroundColor: 'white',\n            position: 'absolute',\n            left: `${33}%`,\n            top: `${33}%`,\n            transform: `translate(-${33}%, -${33}%)`,\n            p: 1\n        }}>\n            <Typography variant='h2'> Game Over </Typography>\n            {\n                players.map(p => (\n                    <Box>\n                        <Typography variant='p'>{p.n} - {p.v}</Typography>\n                    </Box>\n                ))\n            }\n        </Box>\n    );\n\n    // special card Rule\n    useEffect(() => {\n        console.log('top', nextCard.intVal)\n        switch (nextCard.intVal) {\n            case 7:\n                setDesiredCard(null)\n                setCanLook(true)\n                setSpecialOpen(true)\n                break;\n            case 8:\n                setDesiredCard(null)\n                setCanLook(true)\n                setSpecialOpen(true)\n                break;\n            case 9:\n                setDesiredCard(null)\n                setSpecialOpen(true)\n                break;\n            case 10:\n                setDesiredCard(null)\n                setCanLook(true)\n                setSpecialOpen(true)\n                break;\n            default:\n                setDesiredCard(null)\n                setCanLook(false)\n                setSpecialOpen(false)\n        }\n    }, [nextCard.intVal])\n\n    // 9 and 10 rule \n    useEffect(() => {\n        desiredCard && ditchedCard ? setCanConfirm(true) : setCanConfirm(false)\n    }, [desiredCard, ditchedCard])\n\n    useEffect(() => {\n\n        socket.emit('clientToServerWelcome', [nickname, gameId]);\n\n        socket.on('serverToClientPlayers', (players) => {\n            // setSpecialOpen(false)\n            setPlayers([...players]);\n        });\n\n        socket.on('serverToClientId', (id) => {\n            setId(id);\n        });\n\n        // TODO: add deck and discard functionality\n        socket.on('serverToClientGameState', ([nextCard, discard, turn]) => {\n            setTurnId('')\n            setTurnId(turn)\n            setNextCard(nextCard)\n            setDiscard([...discard])\n        })\n\n        socket.on('serverToClientRedCalled', () => {\n            setRedCalled(true);\n        })\n\n        socket.on('serverToClientEndGame', ([scoreboard]) => {\n            setEndGame(true)\n            setEndGameOpen(true)\n        })\n\n        return () => {\n            socket.off('serverToClientPlayers');\n            socket.off('serverToClientId');\n            socket.off('serverToClientGameState');\n        }\n    }, [gameId, socket, nickname])\n\n    return (\n        <Box sx={{ maxHeight: '100vh', mt: 2 }}>\n            {/* Turn Modal */}\n            <Modal\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {body}\n            </Modal>\n\n            {/* Endgame Modal */}\n            <Modal\n                hideBackdrop\n                open={endGameOpen}\n                onClose={handleEndGameClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {endGameBody}\n            </Modal>\n\n            <Grid container spacing={2}>\n                {/* Info Panel: Includes player list, next and discard piles, info display */}\n                <Grid item xs={3}>\n                    <Box sx={{ display: 'flex', height: '100%', flexDirection: 'column' }}>\n                        <Box sx={{ marginBottom: 'auto', width: '100%' }}>\n                            <Typography variant='h5' sx={{ ml: 2, textAlign: 'left' }}>Player List</Typography>\n                            {\n                                players.map((player, i) => (\n                                    <Box sx={{ ml: 2, textAlign: 'left' }}>\n                                        <Typography variant={'h6'} sx={{ ml: 2 }}>{turnId === player.s ? `${player.n}'s turn` : player.n}</Typography>\n                                    </Box>\n                                ))\n                            }\n\n                            {/* coloring maybe\n                                players.map((player, i) => (\n                                    <Box sx={i%2===0 ? { ml: 2, textAlign: 'left', backgroundColor: \"brown\" } : { ml: 2, textAlign: 'left' }}>\n                                        <Typography variant={'h6'} sx={{ ml: 2 }}>{turnId === player.s ? `${player.n}'s turn` : player.n}</Typography>\n                                    </Box>\n                                ))\n                            */}\n                        </Box>\n                        <Box sx={{ marginBottom: 'auto', width: '100%', textAlign: 'center' }}>\n                            {/* Deck and Discard */}\n                            <Grid container>\n                                <Grid item xs={6}>\n                                    <Box sx={{ ml: 2 }}>\n                                        <Typography variant='h5' sx={{ textAlign: 'left' }}>Deck</Typography>\n                                        {\n                                            turnId === id\n                                                ? <PlayingCard onClick={() => handleOpen('nextCard')} image={`/cards/${nextCard.visVal}${nextCard.suit}.png`} />\n                                                : <PlayingCard image={`/cards/red_back.png`} />\n                                        }\n                                    </Box>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Box sx={{ ml: 2 }}>\n                                        <Typography variant='h5' sx={{ textAlign: 'left' }}>Discard</Typography>\n                                        {\n                                            turnId === id\n                                                ? <PlayingCard\n                                                    onClick={discard.length > 0 ? () => handleOpen('discard') : null}\n                                                    image={\n                                                        discard?.length > 0 ?\n                                                            `/cards/${discard[discard.length - 1].visVal}${discard[discard.length - 1].suit}.png` :\n                                                            `/cards/red_back.png`\n                                                    } />\n                                                : <PlayingCard\n                                                    image={\n                                                        discard?.length > 0 ?\n                                                            `/cards/${discard[discard.length - 1].visVal}${discard[discard.length - 1].suit}.png` :\n                                                            `/cards/red_back.png`\n                                                    } />\n                                        }\n                                    </Box>\n                                </Grid>\n                            </Grid>\n                        </Box>\n\n                        {turnId === id ? (\n                            <Box sx={{ ml: 2, mt: 1 }}>\n                                <Button variant='outlined' onClick={() => handleCardSwap(nextCard, -1, 'negative')} sx={{ width: '100%', color: 'brown' }}>Skip</Button>\n                                {\n                                    redCalled ? <Button variant='contained' disabled onClick={handleRed} sx={{ mt: 1, width: '100%' }}>Red</Button> : <Button variant='contained' onClick={handleRed} sx={{ mt: 1, backgroundColor: '#28A5A5', width: '100%', color: 'brown' }}>Red</Button>\n                                }\n\n                            </Box>\n                        ) : (\n                            <Box sx={{ ml: 2, mt: 1 }}>\n                                <Button variant='outlined' disabled sx={{ width: '100%' }}>Skip</Button>\n                                <Button variant='contained' disabled onClick={handleRed} sx={{ mt: 1, width: '100%' }}>Red</Button>\n                            </Box>)\n                        }\n\n\n\n                    </Box>\n                </Grid>\n                {/* Inner/Gameboard Grid: Divides each hand from each other */}\n                <Grid item xs={9}>\n                    <Box sx={{ height: '100%' }}>\n                        <Grid container spacing={1}>\n                            {\n                                players.map(player => (\n                                    <Grid item xs={3}>\n                                        <Box elevation={0} sx={player.s === id ? { padding: 2, backgroundColor: '#28A5A5' } : { padding: 2 }}>\n                                            <h4>{player.n}</h4>\n                                            <Grid container spacing={1} alignItems=\"stretch\">\n                                                {/* Hand Map */}\n                                                {\n                                                    player.s === id\n                                                        ? player.h.map((card, i) => (\n                                                            <Grid item xs={6} sx={{ display: 'flex', flexDirection: 'column', maxHeight: '100%' }}>\n                                                                {\n                                                                    card === 0\n                                                                        ? <PlayingCard />\n                                                                        : <PlayingCard onClick={() => handleCardSlap(card, i)} image={i > 1 ? `/cards/${card.visVal}${card.suit}.png` : `/cards/red_back.png`} />\n                                                                }\n                                                            </Grid>\n                                                        ))\n                                                        : player.h.map((card, i) => (\n                                                            <Grid item xs={6} sx={{ display: 'flex', flexDirection: 'column' }}>\n                                                                {\n                                                                    card === 0\n                                                                        ? <PlayingCard />\n                                                                        : <PlayingCard onClick={() => handleCardSlap(card, i)} image={`/cards/red_back.png`} />\n                                                                }\n                                                            </Grid>\n                                                        ))\n                                                }\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                )\n                                )\n                            }\n                        </Grid>\n                    </Box>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n\nexport const WrappedGame = (props) => (\n    <SocketContext.Consumer>\n        {socket => <Game {...props} socket={socket} />}\n    </SocketContext.Consumer>\n)\n\n","/Users/kojinglick/Dev/socketsJs/v4/red/client/src/components/Lobby.js",["60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":8,"nodeType":"67","messageId":"68","endLine":1,"endColumn":13},{"ruleId":"65","severity":1,"message":"69","line":1,"column":27,"nodeType":"67","messageId":"68","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"70","line":27,"column":12,"nodeType":"67","messageId":"68","endLine":27,"endColumn":22},{"ruleId":"65","severity":1,"message":"71","line":27,"column":24,"nodeType":"67","messageId":"68","endLine":27,"endColumn":37},{"ruleId":"65","severity":1,"message":"72","line":28,"column":12,"nodeType":"67","messageId":"68","endLine":28,"endColumn":19},{"ruleId":"73","severity":1,"message":"74","line":79,"column":8,"nodeType":"75","endLine":79,"endColumn":10,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'scoreboard' is assigned a value but never used.","'setScoreboard' is assigned a value but never used.","'endGame' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'id', 'nickname', and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [history, id, nickname, socket]",{"range":"82","text":"83"},[2409,2411],"[history, id, nickname, socket]"]